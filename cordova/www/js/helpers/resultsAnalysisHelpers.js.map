{"version":3,"sources":["resultsAnalysisHelpers.js"],"names":["totalMatchigResultsPercentage","dummyResults","userGuesses","apiWinners","emotionsTested","successRateForEachEmotion","tempNumber","tempEmotion","numberOfTimesEmotionTested","usersPointForEachEmotion","number","numberOfTimesAPIAgreesWithTheUser","forEach","obj","prop","Array","isArray","prop2","String","includes","push","overall","length","i","_i","k","console","log"],"mappings":"AAAA;;AAEA,SAASA,6BAAT,CAAuCC,YAAvC,EAAqD;;AAEnDC,gBAAc,EAAd;AACAC,eAAa,EAAb;AACAC,mBAAiB,EAAjB;AACAC,8BAA4B,EAA5B;;AAEA,MAAIC,aAAa,CAAjB;AACA,MAAIC,cAAc,EAAlB;AACA,MAAIC,6BAA6B,CAAjC;AACA,MAAIC,2BAA2B,CAA/B;AACA,MAAIC,SAAS,CAAb;;AAEA,MAAIC,oCAAoC,CAAxC;;AAEAV,eAAaW,OAAb,CAAqB,UAAUC,GAAV,EAAe;AAClC,SAAKC,IAAL,IAAaD,GAAb,EAAkB;AAChB,UAAIE,MAAMC,OAAN,CAAcH,IAAIC,IAAJ,CAAd,CAAJ,EAA8B;AAC5B,aAAKG,KAAL,IAAcJ,IAAIC,IAAJ,EAAU,CAAV,EAAa,QAAb,CAAd,EAAsC;AACpC,cAAID,IAAIC,IAAJ,EAAU,CAAV,EAAa,QAAb,EAAuBG,KAAvB,IAAgCX,UAAhC,IAA8CY,OAAOL,IAAIC,IAAJ,EAAU,CAAV,EAAa,QAAb,EAAuBG,KAAvB,CAAP,EAAsCE,QAAtC,CAA+C,GAA/C,MAAwD,KAA1G,EAAiH;AAC/Gb,yBAAaO,IAAIC,IAAJ,EAAU,CAAV,EAAa,QAAb,EAAuBG,KAAvB,CAAb;AACAV,0BAAcU,KAAd;AACD;AACF;AACDd,mBAAWiB,IAAX,CAAgBb,WAAhB;AACAD,qBAAa,CAAb;AACAC,sBAAc,EAAd;AACD,OAVD,MAUO;AACLL,oBAAYkB,IAAZ,CAAiBP,IAAI,WAAJ,CAAjB;AACD;AACF;AACD,QAAIX,YAAYQ,MAAZ,MAAwBP,WAAWO,MAAX,CAA5B,EAAgD;AAC9CC;AACD;AACDD;AACD,GApBD;;AAsBA,MAAIW,UAAUV,oCAAoCT,YAAYoB,MAAhD,GAAyD,GAAzD,GAA+D,GAA7E;;AAEA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIpB,WAAWmB,MAA/B,EAAuCC,GAAvC,EAA4C;AAC1C,QAAI,CAACnB,eAAee,QAAf,CAAwBhB,WAAWoB,CAAX,CAAxB,CAAL,EAA6C;AAC3CnB,qBAAegB,IAAf,CAAoBjB,WAAWoB,CAAX,CAApB;AACD;AACF,GA3CkD,CA2CjD;;AAEF,OAAK,IAAIC,KAAK,CAAd,EAAiBA,KAAKpB,eAAekB,MAArC,EAA6CE,IAA7C,EAAmD;AACjD,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAItB,WAAWmB,MAA/B,EAAuCG,GAAvC,EAA4C;AAC1C,UAAIrB,eAAeoB,EAAf,MAAuBrB,WAAWsB,CAAX,CAA3B,EAA0C;AACxCjB;AACA,YAAIL,WAAWsB,CAAX,MAAkBvB,YAAYuB,CAAZ,CAAtB,EAAsC;AACpChB;AACD;AACF;AACF;AACDJ,8BAA0Be,IAA1B,CAA+BhB,eAAeoB,EAAf,IAAqB,IAArB,GAA4Bf,2BAA2BD,0BAA3B,GAAwD,GAApF,GAA0F,GAAzH;AACAA,iCAA6B,CAA7B;AACAC,+BAA2B,CAA3B;AACD,GAzDkD,CAyDjD;;AAEFiB,UAAQC,GAAR,CAAY;AACVN,aAASA,OADC;AAEVjB,oBAAgBA,cAFN;AAGVC,+BAA2BA;AAHjB,GAAZ;;AAMA,SAAO;AACLgB,aAASA,OADJ;AAELjB,oBAAgBA,cAFX;AAGLC,+BAA2BA;AAHtB,GAAP;AAKD;AACD","file":"resultsAnalysisHelpers.js","sourcesContent":["'use strict';\n\nfunction totalMatchigResultsPercentage(dummyResults) {\n\n  userGuesses = [];\n  apiWinners = [];\n  emotionsTested = [];\n  successRateForEachEmotion = [];\n\n  var tempNumber = 0;\n  var tempEmotion = '';\n  var numberOfTimesEmotionTested = 0;\n  var usersPointForEachEmotion = 0;\n  var number = 0;\n\n  var numberOfTimesAPIAgreesWithTheUser = 0;\n\n  dummyResults.forEach(function (obj) {\n    for (prop in obj) {\n      if (Array.isArray(obj[prop])) {\n        for (prop2 in obj[prop][0]['scores']) {\n          if (obj[prop][0]['scores'][prop2] > tempNumber && String(obj[prop][0]['scores'][prop2]).includes('-') === false) {\n            tempNumber = obj[prop][0]['scores'][prop2];\n            tempEmotion = prop2;\n          }\n        }\n        apiWinners.push(tempEmotion);\n        tempNumber = 0;\n        tempEmotion = '';\n      } else {\n        userGuesses.push(obj['userGuess']);\n      }\n    }\n    if (userGuesses[number] === apiWinners[number]) {\n      numberOfTimesAPIAgreesWithTheUser++;\n    }\n    number++;\n  });\n\n  var overall = numberOfTimesAPIAgreesWithTheUser / userGuesses.length * 100 + '%';\n\n  for (var i = 0; i < apiWinners.length; i++) {\n    if (!emotionsTested.includes(apiWinners[i])) {\n      emotionsTested.push(apiWinners[i]);\n    }\n  } //this for loop pushes each emotion only once into the 'emotionsTested' array\n\n  for (var _i = 0; _i < emotionsTested.length; _i++) {\n    for (var k = 0; k < apiWinners.length; k++) {\n      if (emotionsTested[_i] === apiWinners[k]) {\n        numberOfTimesEmotionTested++;\n        if (apiWinners[k] === userGuesses[k]) {\n          usersPointForEachEmotion++;\n        }\n      }\n    }\n    successRateForEachEmotion.push(emotionsTested[_i] + ': ' + usersPointForEachEmotion / numberOfTimesEmotionTested * 100 + '%');\n    numberOfTimesEmotionTested = 0;\n    usersPointForEachEmotion = 0;\n  } //this for loop calculates how many times the user guessed correctly for each individual emotion\n\n  console.log({\n    overall: overall,\n    emotionsTested: emotionsTested,\n    successRateForEachEmotion: successRateForEachEmotion\n  });\n\n  return {\n    overall: overall,\n    emotionsTested: emotionsTested,\n    successRateForEachEmotion: successRateForEachEmotion\n  };\n}\n//# sourceMappingURL=resultsAnalysisHelpers.js.map\n"]}